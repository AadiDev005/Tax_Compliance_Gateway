version: '3.8'
services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: tax_user
      POSTGRES_PASSWORD: tax_password
      POSTGRES_DB: tax_compliance
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tax_user"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - default

  mongodb:
    image: mongo:7.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - default

  redis:
    image: redis:7.2
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - default

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - default

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - default

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - default

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - default

  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - POSTGRES_URL=postgres://tax_user:tax_password@postgres:5432/tax_compliance?sslmode=disable
      - MONGO_URL=mongodb://mongodb:27017/tax_compliance
      - REDIS_URL=redis:6379
      - KAFKA_BROKERS=kafka:9092
      - APP_ENV=development
    networks:
      - default

  audit-service:
    build:
      context: ./services/audit-service
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - MONGO_URL=mongodb://mongodb:27017/tax_compliance
      - KAFKA_BROKERS=kafka:9092
      - APP_ENV=development
    networks:
      - default

  tax-engine:
    build:
      context: ./services/tax-engine
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    environment:
      - POSTGRES_URL=postgres://tax_user:tax_password@postgres:5432/tax_compliance?sslmode=disable
      - MONGO_URL=mongodb://mongodb:27017/tax_compliance
      - REDIS_URL=redis:6379
      - KAFKA_BROKERS=kafka:9092
      - APP_ENV=development
    networks:
      - default

volumes:
  postgres_data:
  mongo_data:
  redis_data:

networks:
  default:
    driver: bridge
